let bodyParser,cookieParser,express,helmet,cors,restaurant;_b6f‍.x([["default",()=>_b6f‍.o]]);_b6f‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_b6f‍.w("cookie-parser",[["default",["cookieParser"],function(v){cookieParser=v}]]);_b6f‍.w("express",[["default",["express"],function(v){express=v}]]);_b6f‍.w("helmet",[["default",["helmet"],function(v){helmet=v}]]);_b6f‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_b6f‍.w("./routes",[["restaurant",["restaurant"],function(v){restaurant=v}]]);







const app = express()

app.use(helmet())
app.use(bodyParser.json())
app.use(bodyParser.urlencoded({ extended: true }))
app.use(cookieParser())
app.use(cors());

app.use('/restaurants', restaurant)

// Catch 404 and forward to error handler
app.use(function (request, response, next) {
  const err = new Error(translate('errorMessage404Route', response.locals.currentLocale.code))
  err.status = 404
  next(err)
})

// Error handler
app.use(function (err, request, response, next) {
  // Set locals, only providing error in development
  response.locals.error = err
  response.locals.error.status = err.status || 500
  if (request.app.get('env') !== 'development') {
    delete err.stack
  }
  response.locals.title = 'Error'
  // Render the error page
  response.status(err.status || 500)
  response.render('error')
})

_b6f‍.d(app);